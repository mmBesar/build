name: Build HLSDK-Portable Bot10 for Multi-Architecture

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-hlsdk-bot10:
    name: Build HLSDK Bot10 - ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up multiarch support
      if: matrix.arch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
    - name: Install dependencies for amd64
      if: matrix.arch == 'amd64'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y \
          git cmake build-essential \
          gcc-multilib g++-multilib \
          libsdl2-dev:i386 \
          libc6-dev:i386
          
    - name: Install dependencies for arm64
      if: matrix.arch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git cmake build-essential \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          qemu-user-static
          
    - name: Clone HLSDK-Portable bot10 branch
      run: |
        git clone --recursive -b bot10 https://github.com/FWGS/hlsdk-portable.git hlsdk-bot10
        cd hlsdk-bot10
        git submodule update --init --recursive
        
    - name: Configure build for amd64
      if: matrix.arch == 'amd64'
      run: |
        cd hlsdk-bot10
        export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
        
        echo "=== CMake Configuration for amd64 ==="
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-m32" \
          -DCMAKE_CXX_FLAGS="-m32" \
          -DCMAKE_SYSTEM_PROCESSOR=i386 \
          -DGOLDSOURCE_SUPPORT=ON \
          -DCMAKE_VERBOSE_MAKEFILE=ON
        
        echo "=== CMake configuration completed ==="
          
    - name: Configure build for arm64
      if: matrix.arch == 'arm64'
      run: |
        cd hlsdk-bot10
        # Install additional ARM64 development packages
        sudo apt-get install -y libc6-dev-arm64-cross
        
        echo "=== CMake Configuration for arm64 ==="
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
          -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
          -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
          -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
          -DCMAKE_C_FLAGS="-march=armv8-a" \
          -DCMAKE_CXX_FLAGS="-march=armv8-a" \
          -D64BIT=ON \
          -DGOLDSOURCE_SUPPORT=OFF \
          -DCMAKE_VERBOSE_MAKEFILE=ON
        
        echo "=== CMake configuration completed ==="
          
    - name: Build HLSDK
      run: |
        cd hlsdk-bot10
        cmake --build build --config Release -j$(nproc)
        
        # Show build completion status
        echo "Build completed for ${{ matrix.arch }}"
        echo "Build directory size: $(du -sh build)"
        
    - name: Create artifact directory and copy files
      run: |
        cd hlsdk-bot10
        mkdir -p ../artifacts/${{ matrix.arch }}
        
        # Debug: Show what was actually built
        echo "=== Build directory structure ==="
        find build -type f -name "*.so" -o -name "*.dll" -o -name "*.dylib" | head -20
        echo "=== Detailed dlls directory ==="
        ls -la build/dlls/ 2>/dev/null || echo "dlls directory not found"
        echo "=== Detailed cl_dll directory ==="
        ls -la build/cl_dll/ 2>/dev/null || echo "cl_dll directory not found"
        
        # Find and copy the actual built files
        FOUND_HL=0
        FOUND_CLIENT=0
        
        # Look for hl library in various possible locations
        for hl_path in "build/dlls/hl.so" "build/dlls/Release/hl.dll" "build/dlls/Debug/hl.dll" "build/dlls/hl.dll"; do
          if [ -f "$hl_path" ]; then
            echo "Found hl library at: $hl_path"
            cp "$hl_path" ../artifacts/${{ matrix.arch }}/
            FOUND_HL=1
            break
          fi
        done
        
        # Look for client library in various possible locations  
        for client_path in "build/cl_dll/client.so" "build/cl_dll/Release/client.dll" "build/cl_dll/Debug/client.dll" "build/cl_dll/client.dll"; do
          if [ -f "$client_path" ]; then
            echo "Found client library at: $client_path"
            cp "$client_path" ../artifacts/${{ matrix.arch }}/
            FOUND_CLIENT=1
            break
          fi
        done
        
        # Report what we found
        if [ $FOUND_HL -eq 0 ]; then
          echo "WARNING: No hl library found for ${{ matrix.arch }}"
        fi
        if [ $FOUND_CLIENT -eq 0 ]; then
          echo "WARNING: No client library found for ${{ matrix.arch }}"
        fi
        
        # Create info file
        cat > ../artifacts/${{ matrix.arch }}/build_info.txt << EOF
Build Information:
Architecture: ${{ matrix.arch }}
Branch: bot10
Commit: $(git rev-parse HEAD)
Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
Bot Support: Enabled
HL Library Found: $FOUND_HL
Client Library Found: $FOUND_CLIENT
EOF
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hlsdk-bot10-${{ matrix.arch }}
        path: artifacts/${{ matrix.arch }}/
        retention-days: 30

  build-xash3d-fwgs:
    name: Build Xash3D-FWGS - ${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs: build-hlsdk-bot10
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up multiarch support
      if: matrix.arch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
    - name: Install dependencies for amd64
      if: matrix.arch == 'amd64'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y \
          git python3 build-essential \
          gcc-multilib g++-multilib \
          libsdl2-dev:i386 \
          libfreetype-dev:i386 \
          libopus-dev:i386 \
          libbz2-dev:i386 \
          libvorbis-dev:i386 \
          libopusfile-dev:i386 \
          libogg-dev:i386
        export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
        
    - name: Install dependencies for arm64
      if: matrix.arch == 'arm64'
      run: |
        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install -y \
          git python3 build-essential \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          libsdl2-dev:arm64 \
          libfreetype-dev:arm64 \
          libopus-dev:arm64 \
          libbz2-dev:arm64 \
          libvorbis-dev:arm64 \
          libopusfile-dev:arm64 \
          libogg-dev:arm64 \
          qemu-user-static
          
    - name: Clone Xash3D-FWGS
      run: |
        git clone --recursive https://github.com/FWGS/xash3d-fwgs.git
        cd xash3d-fwgs
        git submodule update --init --recursive
        
    - name: Download HLSDK artifacts
      uses: actions/download-artifact@v4
      with:
        name: hlsdk-bot10-${{ matrix.arch }}
        path: hlsdk-artifacts/
        
    - name: Configure and build Xash3D for amd64
      if: matrix.arch == 'amd64'
      run: |
        cd xash3d-fwgs
        export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
        python3 waf configure --sdl2 --enable-staticlibs
        python3 waf build
        
    - name: Configure and build Xash3D for arm64
      if: matrix.arch == 'arm64'
      run: |
        cd xash3d-fwgs
        export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
        python3 waf configure -8 --sdl2 --enable-staticlibs
        python3 waf build
        
    - name: Prepare final artifacts
      run: |
        mkdir -p final-artifacts/${{ matrix.arch }}/valve/dlls
        mkdir -p final-artifacts/${{ matrix.arch }}/valve/cl_dlls
        
        # Copy Xash3D engine files
        cd xash3d-fwgs
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          cp build/engine/xash3d final-artifacts/${{ matrix.arch }}/ 2>/dev/null || echo "xash3d binary not found"
          cp build/mainui/libmainui.so final-artifacts/${{ matrix.arch }}/ 2>/dev/null || echo "mainui not found"
        else
          cp build/engine/xash3d final-artifacts/${{ matrix.arch }}/ 2>/dev/null || echo "xash3d binary not found"
          cp build/mainui/libmainui.so final-artifacts/${{ matrix.arch }}/ 2>/dev/null || echo "mainui not found"
        fi
        
        # Copy HLSDK bot10 libraries
        cd ..
        cp hlsdk-artifacts/hl.so final-artifacts/${{ matrix.arch }}/valve/dlls/ 2>/dev/null || \
        cp hlsdk-artifacts/hl.dll final-artifacts/${{ matrix.arch }}/valve/dlls/ 2>/dev/null || \
        echo "No hl library found in artifacts"
        
        cp hlsdk-artifacts/client.so final-artifacts/${{ matrix.arch }}/valve/cl_dlls/ 2>/dev/null || \
        cp hlsdk-artifacts/client.dll final-artifacts/${{ matrix.arch }}/valve/cl_dlls/ 2>/dev/null || \
        echo "No client library found in artifacts"
        
        # Copy build info
        cp hlsdk-artifacts/build_info.txt final-artifacts/${{ matrix.arch }}/ 2>/dev/null || echo "No build info found"
        
        # Create additional info
        cat >> final-artifacts/${{ matrix.arch }}/README.txt << EOF
        Xash3D-FWGS with HLSDK Bot10 Support
        ====================================
        
        Architecture: ${{ matrix.arch }}
        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        This package contains:
        - Xash3D-FWGS engine binaries
        - HLSDK Bot10 libraries with bot support
        - Required game libraries
        
        Installation:
        1. Copy the contents to your Half-Life directory
        2. Ensure you have the valve/ folder with game content
        3. Run xash3d to start the engine
        
        Bot Support:
        The hl.so/hl.dll includes bot10 branch features for enhanced bot functionality.
        EOF
        
    - name: Upload final artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xash3d-fwgs-bot10-${{ matrix.arch }}
        path: final-artifacts/${{ matrix.arch }}/
        retention-days: 30
        
    - name: List final artifacts
      run: |
        echo "Final artifacts for ${{ matrix.arch }}:"
        find final-artifacts/${{ matrix.arch }} -type f -exec ls -la {} \;

  create-release:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [build-hlsdk-bot10, build-xash3d-fwgs]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create combined release
      run: |
        mkdir -p release-package
        
        # Copy both architectures
        cp -r xash3d-fwgs-bot10-amd64 release-package/ 2>/dev/null || echo "amd64 artifacts not found"
        cp -r xash3d-fwgs-bot10-arm64 release-package/ 2>/dev/null || echo "arm64 artifacts not found"
        
        # Create release info
        cat > release-package/RELEASE_INFO.txt << EOF
        Xash3D-FWGS with HLSDK Bot10 Multi-Architecture Build
        =====================================================
        
        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Commit: ${{ github.sha }}
        
        Included Architectures:
        - amd64 (x86_64 compatible, 32-bit binaries for Steam compatibility)
        - arm64 (AArch64 native binaries)
        
        Each architecture folder contains:
        - Xash3D-FWGS engine
        - HLSDK Bot10 libraries with enhanced bot support
        - Installation instructions
        
        Choose the appropriate architecture for your system.
        EOF
        
    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: xash3d-fwgs-bot10-multi-arch-release
        path: release-package/
        retention-days: 90
