name: Build Xash3D FWGS Bots

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build-xash3d-fwgs-bots.yml'
    branches:
      - main

jobs:

  build-amd64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: FWGS/hlsdk-portable
          ref: bot10
          submodules: recursive

      - name: Patch Bot_Register
        run: |
          FILE="dlls/game.cpp"
          grep -q Bot_Register "$FILE" || {
            sed -i '1i extern void Bot_Register();' "$FILE"
            sed -i '/g_engfuncs = pengfuncsFromEngine;/a Bot_Register();' "$FILE"
          }

      - name: Install deps
        run: sudo apt-get update && sudo apt-get install -y cmake build-essential zip libsdl2-dev

      - name: Build amd64
        run: |
          BUILD="build-amd64"
          cmake -DENABLE_BOTS=ON -DBUILD_SERVER=ON -DBUILD_CLIENT=ON \
                -D64BIT=1 -DCMAKE_BUILD_TYPE=Release \
                -B $BUILD -S .
          cmake --build $BUILD -- -j$(nproc)

      - name: Package amd64
        run: |
          BUILD="build-amd64"
          mkdir out && files=()
          for lib in dlls/hl.so dlls/bot.so cl_dll/client.so; do
            if [ -f "$BUILD/$lib" ]; then
              cp "$BUILD/$lib" "out/$(basename $lib)"
              files+=("$(basename $lib)")
            fi
          done
          if [ ${#files[@]} -eq 0 ]; then echo "No files"; exit 1; fi
          (cd out && zip ../bots-amd64.zip ${files[@]})

      - uses: actions/upload-artifact@v4
        with:
          name: bots-amd64.zip
          path: bots-amd64.zip

  build-i386:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: FWGS/hlsdk-portable
          ref: bot10
          submodules: recursive

      - name: Patch Bot_Register
        run: |
          FILE="dlls/game.cpp"
          grep -q Bot_Register "$FILE" || {
            sed -i '1i extern void Bot_Register();' "$FILE"
            sed -i '/g_engfuncs = pengfuncsFromEngine;/a Bot_Register();' "$FILE"
          }

      - name: Install deps
        run: sudo dpkg --add-architecture i386 && sudo apt-get update && sudo apt-get install -y cmake build-essential gcc-multilib g++-multilib libsdl2-2.0-0:i386 zip

      - name: Build i386
        run: |
          BUILD="build-i386"
          cmake -DENABLE_BOTS=ON -DBUILD_SERVER=ON -DBUILD_CLIENT=ON \
                -D64BIT=0 -DCMAKE_BUILD_TYPE=Release \
                -B $BUILD -S .
          cmake --build $BUILD -- -j$(nproc)

      - name: Package i386
        run: |
          BUILD="build-i386"
          mkdir out && files=()
          for lib in dlls/hl.so dlls/bot.so cl_dll/client.so; do
            if [ -f "$BUILD/$lib" ]; then
              cp "$BUILD/$lib" "out/$(basename $lib)"
              files+=("$(basename $lib)")
            fi
          done
          if [ ${#files[@]} -eq 0 ]; then echo "No files"; exit 1; fi
          (cd out && zip ../bots-i386.zip ${files[@]})

      - uses: actions/upload-artifact@v4
        with:
          name: bots-i386.zip
          path: bots-i386.zip

  build-arm64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: FWGS/hlsdk-portable
          ref: bot10
          submodules: recursive

      - name: Patch Bot_Register
        run: |
          FILE="dlls/game.cpp"
          grep -q Bot_Register "$FILE" || {
            sed -i '1i extern void Bot_Register();' "$FILE"
            sed -i '/g_engfuncs = pengfuncsFromEngine;/a Bot_Register();' "$FILE"
          }

      - name: Install deps
        run: sudo apt-get update && sudo apt-get install -y cmake build-essential zip libsdl2-dev gcc-12-aarch64-linux-gnu g++-12-aarch64-linux-gnu

      - name: Build arm64
        run: |
          BUILD="build-arm64"
          cmake -DENABLE_BOTS=ON -DBUILD_SERVER=ON -DBUILD_CLIENT=ON \
                -D64BIT=1 -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc-12 \
                -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++-12 \
                -B $BUILD -S .
          cmake --build $BUILD -- -j$(nproc)

      - name: Package arm64
        run: |
          BUILD="build-arm64"
          mkdir out && files=()
          for lib in dlls/hl.so dlls/bot.so cl_dll/client.so; do
            if [ -f "$BUILD/$lib" ]; then
              cp "$BUILD/$lib" "out/$(basename $lib)"
              files+=("$(basename $lib)")
            fi
          done
          if [ ${#files[@]} -eq 0 ]; then echo "No files"; exit 1; fi
          (cd out && zip ../bots-arm64.zip ${files[@]})

      - uses: actions/upload-artifact@v4
        with:
          name: bots-arm64.zip
          path: bots-arm64.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-i386, build-arm64]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bots-amd64.zip
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: bots-i386.zip
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: bots-arm64.zip
          path: .
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: xash3d-fwgs-bots
          name: Xash3D FWGS Bots
          files: |
            bots-amd64.zip
            bots-i386.zip
            bots-arm64.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
