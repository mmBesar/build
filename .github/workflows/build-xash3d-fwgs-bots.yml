name: Build Xash3D FWGS Bots

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build-xash3d-fwgs-bots.yml'
    branches:
      - main

jobs:
  # Common build template to reduce duplication
  build-template:
    needs: []
    runs-on: ubuntu-latest
    outputs:
      zip_name: ${{ steps.package.outputs.zip_name }}
    strategy:
      matrix:
        arch: [amd64, i386, arm64]
    steps:
      - uses: actions/checkout@v3
        with:
          repository: FWGS/hlsdk-portable
          ref: bot10
          submodules: recursive

      - name: Patch Bot_Register
        run: |
          FILE="dlls/game.cpp"
          grep -q Bot_Register "$FILE" || {
            sed -i '1i extern void Bot_Register();' "$FILE"
            sed -i '/g_engfuncs = pengfuncsFromEngine;/a Bot_Register();' "$FILE"
          }

      - name: Install deps
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          case "${{ matrix.arch }}" in
            amd64)
              sudo apt-get install -y cmake build-essential zip libsdl2-dev
              ;;
            i386)
              sudo apt-get install -y cmake build-essential gcc-multilib g++-multilib libsdl2-2.0-0:i386 zip
              ;;
            arm64)
              sudo apt-get install -y cmake build-essential zip libsdl2-dev \
                gcc-12-aarch64-linux-gnu g++-12-aarch64-linux-gnu
              ;;
          esac

      - name: Configure and Build
        run: |
          BUILD_DIR=build-${{ matrix.arch }}
          cmake_opts="-DENABLE_BOTS=ON -DBUILD_SERVER=ON -DBUILD_CLIENT=ON -DCMAKE_BUILD_TYPE=Release"
          case "${{ matrix.arch }}" in
            amd64)
              cmake $cmake_opts -D64BIT=1 -B $BUILD_DIR -S .
              ;;
            i386)
              cmake $cmake_opts -D64BIT=0 -B $BUILD_DIR -S .
              ;;
            arm64)
              cmake $cmake_opts -D64BIT=1 \
                -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc-12 \
                -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++-12 \
                -B $BUILD_DIR -S .
              ;;
          esac
          cmake --build $BUILD_DIR -- -j$(nproc)

      - name: Package libraries
        id: package
        run: |
          BUILD_DIR=build-${{ matrix.arch }}
          mkdir -p out
          libs=(dlls/hl.so dlls/bot.so cl_dll/client.so)
          packaged=()
          for lib in "${libs[@]}"; do
            if [ -f "$BUILD_DIR/$lib" ]; then
              cp "$BUILD_DIR/$lib" out/$(basename "$lib")
              packaged+=("$(basename "$lib")")
            fi
          done
          if [ ${#packaged[@]} -eq 0 ]; then
            echo "Error: no .so output for ${{ matrix.arch }}"
            exit 1
          fi
          ZIP_NAME="bots-${{ matrix.arch }}.zip"
          (cd out && zip "../$ZIP_NAME" "${packaged[@]}")
          echo "::set-output name=zip_name::$ZIP_NAME"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.zip_name }}
          path: ${{ steps.package.outputs.zip_name }}

  release:
    needs: build-template
    runs-on: ubuntu-latest
    steps:
      - name: Download amd64
        uses: actions/download-artifact@v4
        with:
          name: bots-amd64.zip
      - name: Download i386
        uses: actions/download-artifact@v4
        with:
          name: bots-i386.zip
      - name: Download arm64
        uses: actions/download-artifact@v4
        with:
          name: bots-arm64.zip

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: xash3d-fwgs-bots
          name: Xash3D FWGS Bots
          files: |
            bots-amd64.zip
            bots-i386.zip
            bots-arm64.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
